#理解:maven是java产业化的自动管理工具，根据相应文件自动获取依赖，编译，安装，打包项目。各文件必须以规定方式放在相应目录结构中。才能使用。pom.xml是主配置文件，位于项目根目录。项目太复杂不适合简单项目应用。一个简单配置常常需要更改pom.xml各种属性。
一.安装
	(1).下载文件,选择二进制文件下载。官网第二项是linux版本。
	(2).文件解压。解压文件设为MAVEN_HOME。$MAVEN_HOME/bin加入$PATH。下面有maven用到的脚本文件。
(二).开始使用，自创建项目。
(三).maven中的web怎么用jetty插件运行
	修改pom.xml
	<code>
		<build>
		        <pluginManagement>
		                <plugins>
											<plugin>
											        <groupId>org.mortbay.jetty</groupId>
											        <artifactId>maven-jetty-plugin</artifactId>
											</plugin>
										</plugins>
		        </pluginManagement>
		</build>
	</code>
	以上设置加入jetty插件。默认port是8080.
	可以用以下两种方法更改port。
	（1）.mvn 运行时用以下命令
			<code>
				mvn -Djetty.port=8089 jetty:run
			</code>
	 (2).同样更改pom.xml
	 		<code>
					<plugin>
					        <groupId>org.mortbay.jetty</groupId>
					        <artifactId>maven-jetty-plugin</artifactId>
					        <configuration>
					                <connectors>
					                        <connector implementation="org.mortbay.jetty.nio.SelectChannelConnector">
					                                <port>8089</port>
					                        </connector>
					                </connectors>
					        </configuration>
					</plugin>
			</code>
		方法2要麻烦些，要指定connector的属性，没有指定则不能用这个connector，还是会以8080开启。
		另还有个tomcat插件，但不知道是tomcat插件版本还是什么原因，不能正常使用。
四.打包可以运行jar包，包括依赖和配置文件
	pom.xml:
	<code>
  <build>
	<!--打包插件-->
          <plugins>
                  <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-jar-plugin</artifactId>
                          <configuration>
																	<!--档案文件-->
                                  <archive>
																			    <!--清单-->
                                          <manifest>
																					<!--添加classpath-->
                                                  <addClasspath>true</addClasspath>
																									<!--classpath前缀-->
                                                  <classpathPrefix>lib/</classpathPrefix>
																									<!--主类-->
                                                  <mainClass>com.myspring.Hello</mainClass>
                                          </manifest>
                                  </archive>
                          </configuration>
                  </plugin>
									<!--依赖管理-->
                  <plugin>
                          <groupId>org.apache.maven.plugins</groupId>
                          <artifactId>maven-dependency-plugin</artifactId>
													<!--执行动作-->
                          <executions>
                                  <execution>
																					<!--每个execution唯一标识-->
                                          <id>copy-dependencies</id>
																					<!--执行动作阶段-->
                                          <phase>package</phase>
																					<!--目标-->
                                          <goals>
                                                  <goal>copy-dependencies</goal>
                                          </goals>
                                                <configuration>
																									<!--输出文件-->
                                                        <outputDirectory>${project.build.directory}/lib</outputDirectory>
                                                </configuration>
                                  </execution>
                          </executions>
                  </plugin>
          </plugins>
 <!--外部资源，设置文件(.xml .property)，图片等-->
  <resources>
          <resource>
                  <directory>src/main/java</directory>
                  <includes>
                          <include>**/*.xml</include>
                  </includes>
									<!--过滤-->
                  <filtering>true</filtering>
          </resource>
  </resources>
  </build>
	</code>
	//重要的事情说三遍：plugins不能放在pluginManager中pluginManager中不能运行dependency插件.
plugins不能放在pluginManager中.
plugins不能放在pluginManager中.
plugins不能放在pluginManager中.
五.maven项目tomcat中java.NullPointerException
	tomcat兼容问题，更新tomcat。
六.maven中引入hibernate项目。
	（1）建立一个简单项目。
	 (2) 修改pom.xml文件引入依赖，打包依赖关系，见第四小节。
	 		<code>
				<!-- https://mvnrepository.com/artifact/org.hibernate/hibernate-core -->
				<dependency>
				    <groupId>org.hibernate</groupId>
						<artifactId>hibernate-core</artifactId>
						<version>5.4.0.Final</version>
			  </dependency>
			</code>
	 (3) src/main/java中配置文件hibernate.cfg.xml
	 <code>
			<?xml version="1.0" encoding="utf-8"?>
<!--这里dtd引用地址不是官方教程那个，那个地址无效-->
<!DOCTYPE hibernate-configuration PUBLIC
 "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://hibernate.sourceforge.org/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
        <session-factory>
                <property name = "hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>
                <property name="hibernate.connection.driver_class">com.mysql.jdbc.Driver</property>
                <property name="hibernate.connection.url">jdbc:mysql://127.0.0.1/数据库名字</property>
                <property name="hibernate.connection.username">用户名</property>
                <property name="hibernate.connection.password">密码</property>
								<!--mapping 引用文件-->
                <mapping resource="Employee.hbm.xml"></mapping>
                </session-factory>
</hibernate-configuration>
	 </code>
	Employee.hbm.xml文件:
<code>
	<?xml version="1.0" encoding="UTF-8"?>
<!--同样的引用地址要更改-->
<!DOCTYPE hibernate-mapping PUBLIC
 "-//Hibernate/Hibernate Mapping DTD//EN"
 "http://hibernate.sourceforge.org/hibernate-mapping-3.0.dtd">
<hibernate-mapping>
		<!--这里类各要加上包名字-->
    <class name="com.myspring.Employee" table="你的表名称">       
    <id name="id" type="int" column="id">
								<!--自动增加-->
                <generator class="native"></generator>
        </id>
        <property name="name" type="string" column="name"></property>
        <property name="password" type="string" column="password"></property>
        </class>
</hibernate-mapping>
</code>
以上两人文件写好后可用浏览器打开看看有没有语法问题。
（4）.写程序测试能不能连接上数据库。
		Employee.java:
		<code>
		package com.myspring;

public class Employee{
    private int id;
    private String name;
    private String password;

    public Employee(){}
    public Employee(String name,String password){
        this.name = name;
        this.password = password;
    }

    public int getId(){return id;};
    public void setId(int s){id = s;};
    public String getName(){return name;}
    public void setName(String s){ name = s;}
    public String getPassword(){return password;}
    public void setPassword(String s){password = s;}
}	
		</code>
		Test.java:
		<code>
		package com.myspring;

import java.util.List;
import java.util.Date;
import java.util.Iterator;

import org.hibernate.*;
//用于读取配置文件
import org.hibernate.cfg.Configuration;

public class Test{
		//session容器
    private static SessionFactory factory;
    public static void main(String[] args){
        try{
            factory = new Configuration().configure().buildSessionFactory();
        }catch(Throwable ex){System.out.println("Failed to create sessionFactory object."+ ex);
    }
    Test me = new Test();
    me.listEmployees();
    }

    public void listEmployees(){
				//建立session类
        Session session = factory.openSession();
				//事务
        Transaction tx = null;
        try{
						//开启事务
            tx = session.beginTransaction();
						//查询
            List employees = session.createQuery("From Employee").list();
						//遍历结果
            for(Iterator iterator = employees.iterator();iterator.hasNext();){
                Employee employee = (Employee)iterator.next(); System.out.println("Name:"+employee.getName());
                System.out.println("Password:"+employee.getPassword());
            }
            tx.commit();
        }catch(HibernateException e){
            if(tx != null)  tx.rollback();
            e.printStackTrace();
        }finally{
            session.close();
        }
    }
}
		</code>
到这里就可以编译测试了.
(五).maven默认jdk版本设置
	1.对于单独项目设置,在对应编译插件下面指定source和target标签
		<file>pom.xml
		</file>
		<code>
				<build>
 
<plugins>
 
<plugin>
 
<groupId>org.apache.maven.plugins</groupId>
 
<artifactId>maven-compiler-plugin</artifactId>
 
<configuration>
 
<source>1.7</source>
 
<target>1.7</target>
 
<encoding>${file_encoding}</encoding>
 
</configuration>
 
</plugin>
 
</plugins>
 
</build>
		</code>
	2.全局设定，修改maven软件的conf/settinggs.xml
  <code>
<profiles>
<profile>
 
<id>jdk-1.7</id>
 
<activation>
 
<activeByDefault>true</activeByDefault>
 
<jdk>1.7</jdk>
 
</activation>
 
<properties>
 
<maven.compiler.source>1.7</maven.compiler.source>
 
<maven.compiler.target>1.7</maven.compiler.target>
 
<maven.compiler.compilerVersion>1.7</maven.compiler.compilerVersion>
 
</properties>
 
</profile>
</profiles>
</code>
修改为想要的版本就可以了

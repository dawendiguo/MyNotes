1.error catogory: 3 standared 
	(1). fatal or Nonfatal
	(2). related with system or not
	(3). saved with dump kernel or not 
	from the 3 aspect get 5 err function
	a).	err_ret "Nonfatal and related with a system call, return a error number"
	b). err_sys "Fatal and related with a system call, show message and return terminate"
	c). err_dump "Fatal and related with a system call, saved with dump core and terminate"
	d). err_msg "Nofatal and not related with a system call,show message and return"
	e). err_quit "Fatal and not related with a system call,show message and terminate"
	A program runing with daemon,log error catogory is same as error catogory but without "dump",so it only hava four log error function a). log_reg b). log_sys c). log_msg d). log_quit
2. create file.a libary and file.so libary
	(1).	.a libary create
			a). gcc -o func.o -c func.c
			b). ar rsc libfunc.a fun.o
			c). usage: gcc main.c -o main -static -Lpathtolib -lfunc
	(2). .so libary create
		 a). gcc -fPIC -shared -o libfunc.so func.c
		 b). gcc -c main.c -o main -Lpathtolib -lfunc
3. cannot open shared object file: No such file or directory
	Reason:  can't find .so libary  
	Analyze: pathname not in system search pathname
	How to fix: 
	1).  add you file of pathname into "/etc/ld.so.conf"
	2).  cp you libXXXX.so into /lib64 or /usr/lib64
	3).  set system variabel LD_LIBRARY_PATH 
		<code>
			export  LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/XXX:/XXX/xxx.so
		</code>
3. function 'realloc' use
	archetype  void * realloc( void * ptr , size_t newsize)
    <code>
		int main(void){
				char *ptr;
				char *name = "just a test";
				ptr = (char *)malloc(strlen(name)+1);
				//let ptr equal name
				strcpy(ptr,name);
				//realloc ptr
				realloc(ptr,50);
				//add some data to ptr
				strcat(ptr,"something new");
		}
	</code>
4. amazing fork()
		fork() return twice,first return(0) mean current programe is a child programe.second return(>0) mean current programe is in parent program.
		<code>
			pit_t pid ;

			if(pid = fork() < 0)
				printf("error fork");
		    else if(pid == fork)
				if(pid = fork() < 0)
					printf("error in child fork");
			    else if(pid == 0)
					printf("this is in second child programe");
				else
					printf("this is in first child programe");
		    else
				printf("this is in root programe");

			if(waitpid(pid,NULL,0) != pid)
				err_sys("waitpid error");
		</code>
		pid 返回值有三种大于0（当前进程）、等于0（fork()创建的子进程中)、小于0（内核出错）。
		交进程希望等待子进程结束后执行代码可以用wait()和waitpid()：
		<code>
			if(waitpid(pid,&intNumber,0) != pid)
				err_sys("waitpid error");
			//some other code after child programe
		</code>
5. 6个exec函数
	1）区别 execl execv execle execve execlp execvp 其中l(list)和v(vetor)必须要有一个表示参数列表或参数失量。
	2）另外两个字母 e 表示自己指定环境表不使用系统环境表 。 p 表示在PATH下寻找执行程序文件名，不用指定路径全名。
6. C语言中.(点)和->(箭头)区别
	.(点)前面必须是实体的变量或者结构体，而->(箭头)前面是指针。

7. pause() and alarm() function
	a). pause() 只有在捕捉信号并从相关function返回后，才能使进程继续执行，对于忽略和内核默认动做的信号不能使程序继续。
	b). 两个用法1).alarm(int second)--- 一个N秒后送SIGALRM信号的闹钟。2).alarm(0) 如果之前已经设置一个还没有到时间的闹钟，则这个返回剩余的时间，并将程序唯一闹钟时间设置为0，也可以不为0.就重新计时。
8. setjmp(),longjmp()和goto()区别
	a). setjmp(),longjmp()可以用于全局跳转。使用：
		<code>
			#include <setjmp.h>

			static jmp_buf jmpBuf;

			static void test(){
					//跳转到setjmp()位置，setjmp()返回值是第二个参数
					longjmp(jmpBuf,3);
			}

			int main(){
					int jmpNum;
					printf("setjmp 测试\n");
					//初始化jmp_buf变量
					if((jmpNum = setjmp(jmpBuf)) == 0)
					{
							printf("jmpBuf init ok\n");
							test();
					}
					else{
							printf("这里是跳转回来的返回值:%d\n",jmpNum);
					}
					exit(0);
			}
		</code>
	b). goto只能用于局部跳转不能用于全局。
8. kdump.service useage:
  1). install kexec-tools
      <code>yum install kexec-tools</code>
  2). set crashKernel 
      <code>
      <!--/etc/default/grub-->
        crashkernel = auto
      </code>
  3). restart service
      <code>systemctl restart kdump.service</code>
9. core file dbuf process
  1). set ulimit
      <code>ulimit -c filesize/unlimited</code>
  2). complie code with -g
      <code>gcc -g -o main main.c</code>
  3). run programe ,get core_file
      <code>./main</code>
  4). debuf code with gdb
      <code>gdb main core_XXXX</code>
  <Attention>if core file size is 0, make sure ulimit -c is not 0  & you current filesystem is not windows NTFS. if you filesystem is NTFS ,this core_file can't correct make</Attention>
